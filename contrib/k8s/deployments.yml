---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    app: datamart
    what: rabbitmq
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: datamart
      what: rabbitmq
  template:
    metadata:
      labels:
        app: datamart
        what: rabbitmq
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
      - name: rabbitmq
        image: quay.io/remram44/rabbitmq:3.8.9
        securityContext:
          runAsUser: 999
        env:
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: secrets
              key: amqp.user
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: secrets
              key: amqp.password
        ports:
        - containerPort: 5672
        - containerPort: 15672
        - containerPort: 15692
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: datamart
    what: redis
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: datamart
      what: redis
  template:
    metadata:
      labels:
        app: datamart
        what: redis
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
      - name: redis
        image: redis:6.0
        securityContext:
          runAsUser: 999
        args: ["redis-server", "/usr/local/etc/redis/redis.conf"]
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: config
          mountPath: /usr/local/etc/redis
      volumes:
      - name: config
        configMap:
          name: config
          items:
          - key: redis.conf
            path: redis.conf
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lazo
  labels:
    app: datamart
    what: lazo
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: datamart
      what: lazo
  template:
    metadata:
      labels:
        app: datamart
        what: lazo
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
      - name: lazo
        image: registry.gitlab.com/vida-nyu/datamart/lazo-index-service:0.3.1
        env:
        - name: DATABASE
          value: elasticsearch
        - name: PORT
          value: "50051"
        - name: ELASTICSEARCH_HOST
          value: elasticsearch
        - name: ELASTICSEARCH_PORT
          value: "9200"
        ports:
        - containerPort: 50051
        volumeMounts:
        - mountPath: /cache
          name: cache
      volumes:
      - name: cache
        persistentVolumeClaim:
          claimName: cache
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: datamart
    what: frontend
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: datamart
      what: frontend
  template:
    metadata:
      labels:
        app: datamart
        what: frontend
    spec:
      containers:
      - name: web
        image: datamart_frontend
        imagePullPolicy: IfNotPresent
        env:
        - name: API_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: api_url
        ports:
        - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: apiserver
  labels:
    app: datamart
    what: apiserver
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
  selector:
    matchLabels:
      app: datamart
      what: apiserver
  template:
    metadata:
      labels:
        app: datamart
        what: apiserver
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
      - name: web
        image: datamart_apiserver
        imagePullPolicy: IfNotPresent
        env:
        - name: ELASTICSEARCH_HOSTS
          value: elasticsearch:9200
        - name: AMQP_HOST
          value: rabbitmq
        - name: AMQP_PORT
          value: "5672"
        - name: AMQP_USER
          valueFrom:
            secretKeyRef:
              name: secrets
              key: amqp.user
        - name: AMQP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: secrets
              key: amqp.password
        - name: REDIS_HOST
          value: redis
        - name: S3_KEY
          valueFrom:
            secretKeyRef:
              name: secrets
              key: s3.key
        - name: S3_SECRET
          valueFrom:
            secretKeyRef:
              name: secrets
              key: s3.secret
        - name: S3_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: s3.url
        - name: S3_CLIENT_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: s3.client_url
        - name: S3_BUCKET_PREFIX
          valueFrom:
            configMapKeyRef:
              name: config
              key: s3.bucket_prefix
        - name: GCS_PROJECT
          valueFrom:
            configMapKeyRef:
              name: config
              key: gcs.project
        - name: GCS_CREDS
          valueFrom:
            secretKeyRef:
              name: secrets
              key: gcs.creds
        - name: GCS_BUCKET_PREFIX
          valueFrom:
            configMapKeyRef:
              name: config
              key: gcs.bucket_prefix
        - name: LAZO_SERVER_HOST
          value: lazo
        - name: LAZO_SERVER_PORT
          value: "50051"
        - name: NOMINATIM_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: nominatim_url
        - name: API_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: api_url
        - name: FRONTEND_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: frontend_url
        - name: CUSTOM_FIELDS
          valueFrom:
            configMapKeyRef:
              name: config
              key: custom_fields
        ports:
        - containerPort: 8002
        volumeMounts:
        - mountPath: /cache
          name: cache
        - mountPath: /usr/src/app/lib_geo/data
          name: geo-data
        readinessProbe:
          httpGet:
            path: /health
            port: 8002
          periodSeconds: 1
          failureThreshold: 2
      volumes:
      - name: cache
        persistentVolumeClaim:
          claimName: cache
      - name: geo-data
        persistentVolumeClaim:
          claimName: geo-data
          readOnly: true
      terminationGracePeriodSeconds: 600
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coordinator
  labels:
    app: datamart
    what: coordinator
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  selector:
    matchLabels:
      app: datamart
      what: coordinator
  template:
    metadata:
      labels:
        app: datamart
        what: coordinator
    spec:
      securityContext:
        runAsNonRoot: true
      initContainers:
      - name: fix-permissions
        image: busybox
        securityContext:
          runAsNonRoot: false
        command: ["sh", "-c", "chown -R 998 /cache"]
        volumeMounts:
        - mountPath: /cache
          name: cache
      containers:
      - name: web
        image: datamart_coordinator
        imagePullPolicy: IfNotPresent
        env:
        - name: ELASTICSEARCH_HOSTS
          value: elasticsearch:9200
        - name: AMQP_HOST
          value: rabbitmq
        - name: AMQP_PORT
          value: "5672"
        - name: AMQP_USER
          valueFrom:
            secretKeyRef:
              name: secrets
              key: amqp.user
        - name: AMQP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: secrets
              key: amqp.password
        - name: S3_KEY
          valueFrom:
            secretKeyRef:
              name: secrets
              key: s3.key
        - name: S3_SECRET
          valueFrom:
            secretKeyRef:
              name: secrets
              key: s3.secret
        - name: S3_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: s3.url
        - name: S3_CLIENT_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: s3.client_url
        - name: S3_BUCKET_PREFIX
          valueFrom:
            configMapKeyRef:
              name: config
              key: s3.bucket_prefix
        - name: GCS_PROJECT
          valueFrom:
            configMapKeyRef:
              name: config
              key: gcs.project
        - name: GCS_CREDS
          valueFrom:
            secretKeyRef:
              name: secrets
              key: gcs.creds
        - name: GCS_BUCKET_PREFIX
          valueFrom:
            configMapKeyRef:
              name: config
              key: gcs.bucket_prefix
        - name: API_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: api_url
        - name: MAX_CACHE_BYTES
          valueFrom:
            configMapKeyRef:
              name: config
              key: max_cache_bytes
        ports:
        - containerPort: 8003
        volumeMounts:
        - mountPath: /cache
          name: cache
      volumes:
      - name: cache
        persistentVolumeClaim:
          claimName: cache
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: profiler
  labels:
    app: datamart
    what: profiler
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 2
  selector:
    matchLabels:
      app: datamart
      what: profiler
  template:
    metadata:
      labels:
        app: datamart
        what: profiler
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
      - name: web
        image: datamart_profiler
        imagePullPolicy: IfNotPresent
        env:
        - name: ELASTICSEARCH_HOSTS
          value: elasticsearch:9200
        - name: AMQP_HOST
          value: rabbitmq
        - name: AMQP_PORT
          value: "5672"
        - name: AMQP_USER
          valueFrom:
            secretKeyRef:
              name: secrets
              key: amqp.user
        - name: AMQP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: secrets
              key: amqp.password
        - name: S3_KEY
          valueFrom:
            secretKeyRef:
              name: secrets
              key: s3.key
        - name: S3_SECRET
          valueFrom:
            secretKeyRef:
              name: secrets
              key: s3.secret
        - name: S3_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: s3.url
        - name: S3_CLIENT_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: s3.client_url
        - name: S3_BUCKET_PREFIX
          valueFrom:
            configMapKeyRef:
              name: config
              key: s3.bucket_prefix
        - name: GCS_PROJECT
          valueFrom:
            configMapKeyRef:
              name: config
              key: gcs.project
        - name: GCS_CREDS
          valueFrom:
            secretKeyRef:
              name: secrets
              key: gcs.creds
        - name: GCS_BUCKET_PREFIX
          valueFrom:
            configMapKeyRef:
              name: config
              key: gcs.bucket_prefix
        - name: LAZO_SERVER_HOST
          value: lazo
        - name: LAZO_SERVER_PORT
          value: "50051"
        - name: NOMINATIM_URL
          valueFrom:
            configMapKeyRef:
              name: config
              key: nominatim_url
        volumeMounts:
        - mountPath: /cache
          name: cache
        - mountPath: /usr/src/app/lib_geo/data
          name: geo-data
      volumes:
      - name: cache
        persistentVolumeClaim:
          claimName: cache
      - name: geo-data
        persistentVolumeClaim:
          claimName: geo-data
          readOnly: true
