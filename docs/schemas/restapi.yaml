openapi: 3.0.1
info:
  title: "Auctus"
  description: |
    REST API for Auctus.

    # Introduction

    Auctus is a dataset search engine and data augmentation platform developed at New York University. It can be used to index the content of datasets from a variety of sources, that can later be queried to find data that can be joined or appended to a user's data.

    The system can be found at this address: https://auctus.vida-nyu.org/

    You can find the source code on GitLab: https://gitlab.com/ViDA-NYU/auctus/auctus

    # REST API introduction

    There is also a [Python client library](https://docs.auctus.vida-nyu.org/python/datamart-rest.html) for this API.

    The API is versioned, with the current version being `v1`. The full paths for an API request would therefore be something like:

        https://auctus.vida-nyu.org/api/v1/download/datamart.socrata.data-cityofnewyork-us.ht4t-wzcm
  contact:
    email: "remi.rampin@nyu.edu"
  license:
    name: "MIT"
  version: "1"
externalDocs:
  description: "Auctus documentation (including the web UI and the Python libraries)"
  url: "https://docs.auctus.vida-nyu.org/"
servers:
- url: "https://auctus.vida-nyu.org/api/v1"
tags:
- name: "Query"
  description: "Searching the index for datasets"
- name: "Augment"
  description: "Using Auctus to perform server-side augmentation"
- name: "Ingest"
  description: "Adding new datasets to the index"
paths:
  /upload:
    post:
      tags:
      - "Ingest"
      summary: "Add a dataset to the index"
      operationId: "upload"
      requestBody:
        content:
          multipart/form-data:
            schema:
              oneOf:
              - properties:
                  name:
                    type: string
                    description: "Dataset name"
                  description:
                    type: string
                  address:
                    type: string
                required:
                - name
                - address
              - properties:
                  name:
                    type: string
                    description: "Dataset name"
                  description:
                    type: string
                  file:
                    type: string
                    format: binary
                required:
                - name
                - file
        required: true
      responses:
        200:
          description: "OK, provides ID of dataset (which will be available once profiling ends)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required:
                - id
                additionalProperties: false
        400:
          description: "Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /search:
    post:
      tags:
      - "Query"
      summary: "Search the index for datasets"
      operationId: "search"
      parameters:
      - in: query
        name: "page"
        schema:
          type: integer
          minimum: 1
        required: false
      - in: query
        name: "size"
        schema:
          type: integer
          minimum: 1
        required: false
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                data:
                  type: string
                  description: "Data which you want to augment"
                  format: binary
                query:
                  $ref: "#/components/schemas/Query"
              # TODO: One of the two needs to be provided
            encoding:
              query:
                contentType: application/json
            examples:
              keyword_search:
                summary: "Search using the keywords 'taxi' and 'medallion'"
                value:
                  query:
                    keywords:
                      - "taxi"
                      - "medallion"
                    variables: []
              geo_bronx:
                summary: "Search for geospatial datasets concerning the Bronx"
                value:
                  query:
                    keywords: []
                    variables:
                    - type: geospatial_variable
                      latitude1: 40.894673917657514
                      latitude2: 40.823526516469315
                      longitude1: -73.91395568847656
                      longitude2: -73.82675170898438
          application/json:
            schema:
              $ref: "#/components/schemas/Query"
            examples:
              keyword_search:
                summary: "Search using the keywords 'taxi' and 'medallion'"
                value:
                  keywords:
                    - "taxi"
                    - "medallion"
                  variables: []
              geo_bronx:
                summary: "Search for geospatial datasets concerning the Bronx"
                value:
                  keywords: []
                  variables:
                  - type: geospatial_variable
                    latitude1: 40.894673917657514
                    latitude2: 40.823526516469315
                    longitude1: -73.91395568847656
                    longitude2: -73.82675170898438
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Result"
                  facets:
                    $ref: "#/components/schemas/Facets"
                required: ["results"]
                additionalProperties: false
        400:
          description: "Invalid query"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /profile:
    post:
      tags:
      - "Query"
      summary: Profile a dataset
      description: |
        The JSON object returned by this endpoint can be passed to /search as the 'data_profile'.

        It replaces the 'data' argument, allowing for lighter searches since the data is only sent once. This is useful in situation where the user will incrementally adjust his query.
      operationId: "profile"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                data:
                  type: string
                  description: Data which you want to profile
                  format: binary
            examples:
              simple:
                summary: Example CSV file
                value:
                  data: "name,country,number,what\nremi,france,4,false\naecio,brazil,3,true\nsonia,peru,7,true\nroque,peru,8,true\nfernando,brazil,10,false\n"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        400:
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /download/{dataset_id}:
    get:
      tags:
      - "Query"
      summary: "Download a full dataset by its ID"
      operationId: "download_id"
      parameters:
      - in: path
        name: "dataset_id"
        schema:
          type: string
        required: true
        examples:
          nyc_data:
            value: "datamart.socrata.data-cityofnewyork-us.395v-hkhg"
      - in: query
        name: "format"
        schema:
          enum: ["csv", "d3m"]
      responses:
        404:
          description: "No dataset with this ID"
        200:
          description: OK
        302:
          description: "OK, redirects to dataset"
  /download:
    post:
      tags:
      - "Query"
      summary: "Download a dataset from a search result"
      operationId: "download"
      parameters:
      - in: query
        name: "format"
        schema:
          enum: ["csv", "d3m"]
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                data:
                  type: string
                  description: "Data which you want to augment"
                  format: binary
                task:
                  $ref: "#/components/schemas/Result"
              required:
              - task
            examples:
              nyc_data:
                summary: "Sample search result sent back as task"
                value:
                  task:
                    id: "datamart.socrata.data-cityofnewyork-us.vbgf-ket3"
                    metadata:
                      columns:
                        - name: "Borough"
                        - name: "Calendar Year"
                        - name: "Filed Violation Count"
                      materialize:
                        socrata_id: "vbgf-ket3"
                        socrata_domain: "data.cityofnewyork.us"
                        socrata_updated: "2019-04-29T16:54:13.000Z"
                        direct_url: "https://data.cityofnewyork.us/api/views/vbgf-ket3/rows.csv?accessType=DOWNLOAD"
                        identifier: datamart.socrata
                        date: "2019-06-27T19:26:53.147559Z"
            encoding:
              task:
                contentType: application/json
          application/json:
            schema:
              $ref: "#/components/schemas/Result"
            examples:
              nyc_data:
                summary: "Sample search result sent back as task"
                value:
                  id: "datamart.socrata.data-cityofnewyork-us.vbgf-ket3"
                  metadata:
                    columns:
                      - name: "Borough"
                      - name: "Calendar Year"
                      - name: "Filed Violation Count"
                    materialize:
                      socrata_id: "vbgf-ket3"
                      socrata_domain: "data.cityofnewyork.us"
                      socrata_updated: "2019-04-29T16:54:13.000Z"
                      direct_url: "https://data.cityofnewyork.us/api/views/vbgf-ket3/rows.csv?accessType=DOWNLOAD"
                      identifier: datamart.socrata
                      date: "2019-06-27T19:26:53.147559Z"
      responses:
        404:
          description: "No dataset for this result"
        200:
          description: OK
        400:
          description: "Invalid query"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /augment:
    post:
      tags:
      - "Augment"
      summary: "Augment an input dataset with a selected search result"
      operationId: "augment"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                data:
                  type: string
                  description: "Data which you want to augment"
                  format: binary
                task:
                  $ref: "#/components/schemas/Result"
              required:
              - task
            encoding:
              task:
                contentType: application/json
      responses:
        200:
          description: OK
        400:
          description: "Invalid request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Query:
      $ref: "query_input_schema.json"
    Error:
      description: "JSON object returned by API on client errors"
      properties:
        error:
          type: string
          description: "The error message"
    Result:
      $ref: "query_result_schema.json"
    Facets:
      additionalProperties:
        properties:
          buckets:
            additionalProperties:
              type: integer
          incomplete:
            type: boolean
